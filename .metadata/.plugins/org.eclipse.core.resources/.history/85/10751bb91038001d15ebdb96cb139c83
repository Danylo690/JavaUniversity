import java.util.*;
import java.util.stream.*;

public class DirectoryOfEnterprises {
	
	public ArrayList<Enterprise> ListOfEnterprises = new ArrayList<Enterprise>();
	
	public DirectoryOfEnterprises()
	{
		ListOfEnterprises.add(new Enterprise("Ent1", 656));
		ListOfEnterprises.add(new Enterprise("Ent2", 5847));
		ListOfEnterprises.add(new Enterprise("Ent3", 1235));
		ListOfEnterprises.add(new Enterprise("Ent4", 183));
	}
	
	public void AddEnterprise(String name, int phoneNumber)
	{
		//Проверка есть ли в списке элемент с таким номером телефона
		Enterprise enterprise = ListOfEnterprises
				.stream()
				.filter((n) -> n.GetPhoneNumber() == phoneNumber)
				.findAny()
				.orElse(null);
		//Если отсутствует, то добавляем в список новый элемент
		if(enterprise == null)
		{
			ListOfEnterprises.add(new Enterprise(name, phoneNumber));
		}
	}
	
	public void PrintAllEnterprises()
	{
		//Вывод на экран всех элементов списка
		System.out.print("All enterprises: \n");
		ListOfEnterprises
		.stream()
		.forEach((n) -> { System.out.print(n.GetName() + ": " + n.GetPhoneNumber() + "\n"); });
	}
	
	public void Difference()
	{
		//Получение минимального значения
		Optional<Integer> minValue = ListOfEnterprises
				.stream()
				.map((n) -> n.GetPhoneNumber())
				.min(Integer::compare);
		
		//Получение максимального значения
		Optional<Integer> maxValue = ListOfEnterprises
				.stream()
				.map((n) -> n.GetPhoneNumber())
				.max(Integer::compare);
		
		//Нахождение разницы максимального и минимального значений
		if(minValue.isPresent() && maxValue.isPresent())
		{
			System.out.print("Min: " + minValue.get() + "\nMax: " + maxValue.get());
			System.out.println();
			
			System.out.print("Difference: " + (maxValue.get() - minValue.get()));
			System.out.println();
		}
	}
	
	public void SortList()
	{
		//Сортировка элементов по убыванию номеров телефона
		Stream<Enterprise> sortedList = ListOfEnterprises
				.stream()
				.sorted(Comparator.comparing(Enterprise::GetPhoneNumber).reversed());
		
		System.out.print("Sortered list: \n");
		sortedList.forEach((n) -> System.out.print(n.GetName() + ": " + n.GetPhoneNumber() + "\n"));
	}
	
	public void OddValue(int inputPhoneNumber)
	{
		//Все нечётные номера, которые больше введеного значения
		Stream<Enterprise> oddValues = ListOfEnterprises
				.stream()
				.filter((n) -> (n.GetPhoneNumber() % 2) == 1)
				.filter((n) -> n.GetPhoneNumber() > inputPhoneNumber);
		
		System.out.print("Odd values that greater than input value:\n");
		oddValues.forEach((n) -> System.out.print(n.GetName() + ": " + n.GetPhoneNumber() + "\n"));
	}
	
	public void EvenValue(int inputPhoneNumber)
	{
		//Все чётные номера, которые больше введеного значения
		Stream<Enterprise> oddValues = ListOfEnterprises
				.stream()
				.filter((n) -> (n.GetPhoneNumber() % 2) == 0)
				.filter((n) -> n.GetPhoneNumber() > inputPhoneNumber);
		
		System.out.print("Even values that greater than input value:\\n");
		oddValues.forEach((n) -> System.out.print(n.GetName() + ": " + n.GetPhoneNumber() + "\n"));
	}
}